//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""ControllerInputs"",
            ""id"": ""1ee3b47b-ffea-4beb-b961-059b498a74f0"",
            ""actions"": [
                {
                    ""name"": ""TriggerButton"",
                    ""type"": ""Button"",
                    ""id"": ""e1d472e3-e49a-4faf-aada-0bac90164d0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22a7f4cb-8b66-4c72-b94f-34a2f1d58fe4"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""741e51a8-f00f-42e9-9f60-ff7e7dd629fc"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControllerInputs
        m_ControllerInputs = asset.FindActionMap("ControllerInputs", throwIfNotFound: true);
        m_ControllerInputs_TriggerButton = m_ControllerInputs.FindAction("TriggerButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControllerInputs
    private readonly InputActionMap m_ControllerInputs;
    private List<IControllerInputsActions> m_ControllerInputsActionsCallbackInterfaces = new List<IControllerInputsActions>();
    private readonly InputAction m_ControllerInputs_TriggerButton;
    public struct ControllerInputsActions
    {
        private @InputActions m_Wrapper;
        public ControllerInputsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TriggerButton => m_Wrapper.m_ControllerInputs_TriggerButton;
        public InputActionMap Get() { return m_Wrapper.m_ControllerInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerInputsActions set) { return set.Get(); }
        public void AddCallbacks(IControllerInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerInputsActionsCallbackInterfaces.Add(instance);
            @TriggerButton.started += instance.OnTriggerButton;
            @TriggerButton.performed += instance.OnTriggerButton;
            @TriggerButton.canceled += instance.OnTriggerButton;
        }

        private void UnregisterCallbacks(IControllerInputsActions instance)
        {
            @TriggerButton.started -= instance.OnTriggerButton;
            @TriggerButton.performed -= instance.OnTriggerButton;
            @TriggerButton.canceled -= instance.OnTriggerButton;
        }

        public void RemoveCallbacks(IControllerInputsActions instance)
        {
            if (m_Wrapper.m_ControllerInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerInputsActions @ControllerInputs => new ControllerInputsActions(this);
    public interface IControllerInputsActions
    {
        void OnTriggerButton(InputAction.CallbackContext context);
    }
}
